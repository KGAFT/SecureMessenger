package com.kgaft.SecureMessengerPCClient.UI.StartChatScreen;

import com.kgaft.SecureMessengerPCClient.BackEnd.AppProperties.AppProperties;
import com.kgaft.SecureMessengerPCClient.BackEnd.Authorization.AuthorizationNativeCalls;
import com.kgaft.SecureMessengerPCClient.BackEnd.EncryptionKeys.KeyUtil;
import com.kgaft.SecureMessengerPCClient.UI.ScreenInterface;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.lang.reflect.InvocationTargetException;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;

public class StartChatScreen extends JFrame implements ScreenInterface {
    private JLabel screenLabel;
    private JLabel encryptionKeyOut;
    private JTextField encryptionKeyInput;
    private JButton saveReceiverButton;
    private JButton backButton;
    private JPanel root;
    private JLabel errorOut;
    private JLabel messagesOut;

    public StartChatScreen() {
        setContentPane(root);
        setSize(1200, 500);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setTitle("Start chat");
    }

    private void initFields() throws NoSuchAlgorithmException, SQLException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        AuthorizationNativeCalls authorization = new AuthorizationNativeCalls(AppProperties.getServerBaseUrl());
        byte[] generatedKey = KeyUtil.generateKey();
        StartChat.waitTillJoin(generatedKey);
        String clipboardContent = KeyUtil.byteToString(generatedKey) + "/r" + authorization.getCurrentAuthorizedUser().getLogin();
        encryptionKeyOut.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {

            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON3) {
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(new StringSelection(clipboardContent), null);
                    messagesOut.setText("Copied!");
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });
        encryptionKeyOut.setText("Your encryption key: " + clipboardContent);
    }

    private void initSaveButton() {
        saveReceiverButton.addActionListener(event -> {
            String inputText = encryptionKeyInput.getText();
            if (StartChat.joinChat(inputText.split("/r")[1], KeyUtil.stringToByte(inputText.split("/r")[0]))) {
                hideScreen();
            } else {
                errorOut.setText("Error");
            }
        });
    }

    private void initBackButton() {
        backButton.addActionListener(event -> {
            hideScreen();
        });
    }

    @Override
    public void showScreen() {
        try {
            initFields();
            initSaveButton();
            initBackButton();
        } catch (Exception e) {
            hideScreen();
        }
        setVisible(true);

    }

    @Override
    public void hideScreen() {
        setVisible(false);
    }

    @Override
    public void closeScreen() {
        hideScreen();
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 1, new Insets(0, 0, 0, 0), -1, -1));
        screenLabel = new JLabel();
        screenLabel.setText("Start new chat");
        root.add(screenLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        encryptionKeyOut = new JLabel();
        encryptionKeyOut.setText("Your encryption key is:");
        root.add(encryptionKeyOut, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        encryptionKeyInput = new JTextField();
        encryptionKeyInput.setText("Input this your friends encryption key");
        root.add(encryptionKeyInput, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        saveReceiverButton = new JButton();
        saveReceiverButton.setText("Save receiver");
        root.add(saveReceiverButton, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("Back");
        root.add(backButton, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        errorOut = new JLabel();
        errorOut.setText("");
        root.add(errorOut, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messagesOut = new JLabel();
        messagesOut.setText("");
        root.add(messagesOut, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
