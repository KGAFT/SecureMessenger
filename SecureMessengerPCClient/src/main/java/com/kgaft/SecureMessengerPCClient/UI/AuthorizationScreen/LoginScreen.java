package com.kgaft.SecureMessengerPCClient.UI.AuthorizationScreen;

import com.kgaft.SecureMessengerPCClient.BackEnd.AppProperties.AppProperties;
import com.kgaft.SecureMessengerPCClient.BackEnd.Authorization.AuthorizationNativeCalls;
import com.kgaft.SecureMessengerPCClient.BackEnd.CheckConnectionService.CheckConnectionService;
import com.kgaft.SecureMessengerPCClient.BackEnd.ServiceHandler;
import com.kgaft.SecureMessengerPCClient.UI.MainScreen.MainScreen;
import com.kgaft.SecureMessengerPCClient.UI.ScreenInterface;
import com.kgaft.SecureMessengerPCClient.UI.ScreenManager;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.Locale;

public class LoginScreen extends JFrame implements ScreenInterface {
    private JLabel messengerName;
    private JTextField loginInput;
    private JPasswordField passwordInput;
    private JPanel root;
    private JButton loginButton;
    private JTextField serverAddressInput;
    private JButton registrationButton;
    private JLabel erroLabel;

    public LoginScreen() {
        setContentPane(root);
        setTitle("Authorization Screen");
        setSize(500, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initLoginButton();
        initRegistrationButton();
    }

    public void initLoginButton() {
        loginButton.addActionListener(event -> {
            AuthorizationNativeCalls authorization = new AuthorizationNativeCalls(serverAddressInput.getText());
            if (authorization.authorize(loginInput.getText(), passwordInput.getText())) {
                try {
                    AppProperties.setServerBaseUrl(serverAddressInput.getText());
                    initCheckConnectionService();
                    closeScreen();
                    showMainScreen();
                } catch (SQLException e) {
                    erroLabel.setText("Error!");
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
            } else {
                erroLabel.setText("Error: can't authorize");
            }
        });
    }

    private void initCheckConnectionService() throws SQLException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        int checkConnectionServiceState = ServiceHandler.getServiceState(CheckConnectionService.class);
        if (checkConnectionServiceState == ServiceHandler.SERVICE_DOES_NOT_EXISTS) {
            ServiceHandler.insertService(new CheckConnectionService());
        } else {
            ServiceHandler.start();
        }
    }

    private void showMainScreen() {
        ScreenManager.getAllScreens().forEach(screen -> {
            if (screen.getClass() == MainScreen.class) {
                screen.showScreen();
            }
        });
    }

    private void initRegistrationButton() {
        registrationButton.addActionListener(event -> {
            ScreenManager.getAllScreens().forEach(screen -> {
                if (screen.getClass() == RegistrationScreen.class) {
                    screen.showScreen();
                }
            });
            hideScreen();
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 2, new Insets(0, 100, 0, 100), 1, -1));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        root.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 6, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        messengerName = new JLabel();
        Font messengerNameFont = this.$$$getFont$$$(null, -1, 20, messengerName.getFont());
        if (messengerNameFont != null) messengerName.setFont(messengerNameFont);
        messengerName.setHorizontalAlignment(0);
        messengerName.setHorizontalTextPosition(0);
        messengerName.setText("SecureMessenger");
        root.add(messengerName, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginInput = new JTextField();
        loginInput.setSelectionColor(new Color(-6273105));
        loginInput.setText("Login");
        loginInput.setToolTipText("");
        root.add(loginInput, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        serverAddressInput = new JTextField();
        serverAddressInput.setDisabledTextColor(new Color(-6273105));
        serverAddressInput.setSelectionColor(new Color(-6273105));
        serverAddressInput.setText("Server address");
        root.add(serverAddressInput, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        passwordInput = new JPasswordField();
        passwordInput.setSelectionColor(new Color(-6273105));
        passwordInput.setText("Password");
        passwordInput.setToolTipText("");
        root.add(passwordInput, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        loginButton = new JButton();
        loginButton.setText("Login");
        root.add(loginButton, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        registrationButton = new JButton();
        registrationButton.setText("Registration");
        root.add(registrationButton, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        erroLabel = new JLabel();
        erroLabel.setText("");
        root.add(erroLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }


    @Override
    public void showScreen() {
        setVisible(true);
    }

    @Override
    public void hideScreen() {
        setVisible(false);
    }

    @Override
    public void closeScreen() {
        hideScreen();
        dispose();
    }
}
